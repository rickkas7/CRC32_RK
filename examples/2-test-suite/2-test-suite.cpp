#include "CRC32_RK.h"

SYSTEM_MODE(AUTOMATIC);

// System thread defaults to on in 6.2.0 and later and this line is not required
#ifndef SYSTEM_VERSION_v620
SYSTEM_THREAD(ENABLED);
#endif

SerialLogHandler logHandler(LOG_LEVEL_INFO); // LOG_LEVEL_TRACE

typedef struct {
    const unsigned char *data;
    size_t size;
    uint32_t crc;
} TestVector;

// Begin generated-test code                               
// {"size":1,"text":true,"index":0}
static const unsigned char _testData0[1] = {
    0x52
};
// {"size":10,"text":true,"index":1}
static const unsigned char _testData1[10] = {
    0x6d, 0x4e, 0x53, 0x28, 0x4d, 0x3b, 0x3e, 0x4c, 0x6a, 0x77
};
// {"size":100,"text":false,"index":2}
static const unsigned char _testData2[100] = {
    0x7c, 0x3a, 0x00, 0x13, 0xa1, 0x66, 0x1c, 0xce, 0x30, 0x20, 0xc4, 0xbf, 0x4a, 0x6d, 0x1b, 0x36,
    0xf5, 0x83, 0xec, 0x06, 0x23, 0xe0, 0x7f, 0x26, 0xf1, 0x65, 0xd9, 0x02, 0x37, 0x3e, 0xe7, 0x68,
    0x7c, 0x4b, 0xb6, 0x49, 0xc1, 0x83, 0x4b, 0x96, 0xbc, 0x21, 0x3b, 0x96, 0x1a, 0xc9, 0xca, 0xbb,
    0xf5, 0x06, 0x9e, 0x02, 0x8d, 0x72, 0x72, 0x15, 0x27, 0xcb, 0xcc, 0xae, 0x96, 0x7e, 0x18, 0xb9,
    0xb9, 0xe9, 0x0a, 0x85, 0x4c, 0x50, 0xbe, 0xe8, 0xee, 0x53, 0x50, 0x4d, 0xf2, 0x67, 0x7e, 0x1e,
    0x72, 0x5f, 0xed, 0xfc, 0x96, 0xaf, 0x21, 0x47, 0x99, 0x6c, 0xda, 0x66, 0xc3, 0xc9, 0x1a, 0x29,
    0x46, 0xcc, 0x65, 0xa2
};
// {"size":500,"text":false,"index":3}
static const unsigned char _testData3[500] = {
    0x7d, 0x50, 0xab, 0xd8, 0x67, 0x99, 0x3e, 0x4d, 0x2b, 0xd0, 0xb7, 0x19, 0x41, 0x34, 0x59, 0x4a,
    0xb1, 0xf3, 0xc6, 0xf7, 0x78, 0xfa, 0x73, 0x52, 0x82, 0x5b, 0x1e, 0x3d, 0x52, 0x10, 0x80, 0x7f,
    0x94, 0x6f, 0x03, 0x0f, 0xb6, 0x20, 0x9f, 0x6b, 0xd0, 0xa1, 0x1a, 0xf1, 0x6b, 0xc6, 0x38, 0x62,
    0xa4, 0x57, 0xf7, 0xb3, 0x50, 0xc3, 0x0b, 0x40, 0x2c, 0xe8, 0x5d, 0xcb, 0x61, 0x42, 0x64, 0xe4,
    0x32, 0x3a, 0x7a, 0x24, 0xb1, 0xa5, 0x41, 0x48, 0x0e, 0x20, 0xfe, 0x80, 0xe9, 0x37, 0x17, 0xaf,
    0x58, 0x61, 0xf5, 0xf7, 0x1a, 0x5e, 0xc2, 0x05, 0x98, 0x8b, 0x21, 0x4b, 0x6c, 0xd7, 0x3c, 0xbb,
    0xa2, 0x97, 0x7d, 0x9f, 0x4f, 0x2e, 0x3e, 0xb5, 0x96, 0x8c, 0x6f, 0xa4, 0x90, 0xf4, 0x6a, 0xe9,
    0x09, 0xfa, 0x2d, 0xbe, 0xed, 0xb0, 0x67, 0x8b, 0x4f, 0xcd, 0x6e, 0x58, 0xb5, 0x84, 0xb6, 0x24,
    0xdb, 0x0e, 0xa1, 0x5c, 0xaf, 0x07, 0x91, 0x13, 0xc5, 0x71, 0x30, 0x49, 0x48, 0xb7, 0x20, 0x00,
    0xfd, 0x3d, 0xd2, 0x22, 0x0e, 0x28, 0xd9, 0xaf, 0x4d, 0x00, 0x05, 0x2c, 0x15, 0x72, 0xac, 0x6d,
    0x37, 0xf6, 0x49, 0xea, 0xd8, 0x67, 0x4a, 0xfb, 0x0d, 0x44, 0xb9, 0x7b, 0xa5, 0x6b, 0x00, 0x32,
    0xb3, 0x12, 0x91, 0x7a, 0xc9, 0xff, 0xcb, 0xc8, 0x5a, 0x71, 0x37, 0x29, 0x81, 0xf9, 0xe4, 0x38,
    0x3f, 0x97, 0x68, 0x11, 0xeb, 0xf2, 0xf5, 0xbb, 0xe0, 0xf1, 0xd6, 0x99, 0x56, 0xf7, 0x86, 0xf8,
    0x42, 0x21, 0x1d, 0x83, 0x3f, 0x0a, 0x06, 0x38, 0x43, 0xe1, 0xe8, 0xf3, 0xe8, 0xf5, 0x6f, 0x6f,
    0xab, 0xcf, 0xd3, 0xc2, 0x4f, 0xab, 0x91, 0x80, 0xd3, 0x97, 0xcb, 0xa7, 0x1a, 0x59, 0x47, 0x05,
    0xd7, 0x77, 0xe0, 0x83, 0x01, 0x40, 0xa9, 0x79, 0x82, 0x99, 0xb5, 0x8a, 0x80, 0x94, 0x21, 0x43,
    0x31, 0x9c, 0xdd, 0x1c, 0x73, 0xb5, 0x59, 0xc2, 0x4b, 0xe4, 0xfc, 0x34, 0xde, 0xad, 0x51, 0xdd,
    0xc5, 0x41, 0x11, 0x58, 0x60, 0xbf, 0x57, 0x4a, 0x19, 0x57, 0x68, 0xa6, 0xa6, 0x8b, 0x38, 0x4c,
    0x55, 0x7d, 0x17, 0xcd, 0x52, 0xca, 0xb9, 0x8b, 0x65, 0x98, 0xda, 0x22, 0x96, 0x95, 0xd5, 0x4a,
    0xc3, 0x47, 0xe1, 0x76, 0xcf, 0xea, 0x80, 0x2c, 0xfe, 0xe4, 0xb6, 0xbf, 0x0c, 0x5b, 0x81, 0xda,
    0x56, 0xa2, 0xdd, 0x1d, 0x99, 0x4f, 0x84, 0x0b, 0x10, 0x61, 0x1a, 0xb7, 0x58, 0xd1, 0x69, 0x4b,
    0xfa, 0x68, 0x2d, 0xbc, 0x73, 0x42, 0xf6, 0x1f, 0x2b, 0x09, 0x2f, 0x07, 0x4d, 0x00, 0x59, 0xb4,
    0xe2, 0xc7, 0x5a, 0x7d, 0xa1, 0xe8, 0x9a, 0x88, 0xa2, 0xbf, 0xf4, 0xbf, 0x7e, 0x2e, 0xef, 0x7e,
    0xd4, 0xac, 0x00, 0x23, 0xc4, 0xa9, 0x9a, 0x01, 0x90, 0xcd, 0xe4, 0x09, 0x5c, 0xb6, 0x0d, 0x2e,
    0x0d, 0x4e, 0x8c, 0x08, 0x81, 0x60, 0x33, 0x9c, 0x31, 0x35, 0x60, 0xe1, 0xe0, 0xa4, 0x57, 0x88,
    0xef, 0x69, 0x51, 0xf7, 0xae, 0xce, 0x3a, 0x14, 0x60, 0xf0, 0xef, 0xb6, 0x1b, 0x26, 0x36, 0xa2,
    0x52, 0x1f, 0xc5, 0x9b, 0x7f, 0x57, 0x0d, 0xa5, 0xcb, 0xb5, 0x56, 0x2b, 0x3d, 0xc0, 0xbf, 0x13,
    0x87, 0xcf, 0xd2, 0x8b, 0x66, 0x4c, 0xe8, 0x7d, 0x78, 0xde, 0x40, 0xf9, 0x75, 0x8a, 0x02, 0xe1,
    0xda, 0xad, 0xb8, 0xbb, 0x70, 0x39, 0xcf, 0xce, 0x85, 0x41, 0x46, 0x53, 0xaf, 0x47, 0x5c, 0xa3,
    0xf3, 0x5e, 0x5b, 0xaa, 0xe4, 0x4b, 0x7a, 0x2b, 0xd9, 0x49, 0x47, 0xed, 0x74, 0x7d, 0x61, 0x77,
    0xa7, 0x8c, 0x67, 0x15, 0x79, 0x78, 0xd0, 0x97, 0x40, 0x94, 0x50, 0xa2, 0xff, 0x7c, 0x9a, 0x5d,
    0xbd, 0xfe, 0x71, 0xaf
};
// {"size":1500,"text":false,"index":4}
static const unsigned char _testData4[1500] = {
    0xa0, 0xf4, 0xdf, 0x7f, 0x1a, 0xeb, 0x80, 0x3b, 0x77, 0xe0, 0x83, 0x45, 0x13, 0x11, 0x83, 0x39,
    0x68, 0x35, 0x43, 0x5a, 0x95, 0xa4, 0xb6, 0x30, 0x59, 0xc3, 0xd4, 0x19, 0x4f, 0x76, 0xbe, 0x34,
    0x68, 0x8e, 0xd8, 0x03, 0x34, 0x0d, 0x99, 0x9c, 0xf0, 0x4f, 0x17, 0x90, 0x2b, 0x33, 0x00, 0x06,
    0x24, 0x68, 0xed, 0xb9, 0xc5, 0x77, 0x31, 0x6d, 0x6b, 0xa8, 0x35, 0xb4, 0xb7, 0x40, 0x1a, 0x8f,
    0xbf, 0x2a, 0x5d, 0xd5, 0xf7, 0x4d, 0x20, 0x59, 0xf0, 0x3c, 0x1f, 0x7d, 0xe3, 0x82, 0xdc, 0xbb,
    0x63, 0x8e, 0x5c, 0x6f, 0x6e, 0xe1, 0xc6, 0x21, 0xa8, 0xc8, 0x50, 0x89, 0xce, 0xe7, 0xf7, 0x30,
    0xb9, 0xad, 0xe6, 0x89, 0x70, 0xda, 0x49, 0x86, 0x55, 0xe4, 0xce, 0x10, 0xfe, 0x9c, 0x63, 0xb5,
    0x55, 0xdf, 0xf2, 0xf1, 0x12, 0xf8, 0xe8, 0xdd, 0x10, 0xcf, 0x49, 0xe3, 0x27, 0x19, 0x93, 0x5f,
    0x29, 0xd2, 0x32, 0x4d, 0xce, 0xa1, 0x94, 0x43, 0x73, 0x53, 0xa8, 0x20, 0x3d, 0x84, 0x91, 0xc2,
    0x36, 0xad, 0xf4, 0x6d, 0x97, 0x2d, 0x30, 0xfb, 0xb4, 0x71, 0xfe, 0x6b, 0xdc, 0x94, 0xe8, 0x75,
    0x46, 0x38, 0x3d, 0xb4, 0x07, 0x6f, 0x0d, 0x9a, 0xd3, 0x3b, 0x03, 0xb8, 0x82, 0xb2, 0xd3, 0xae,
    0xb3, 0x34, 0x64, 0xd8, 0xa0, 0xf3, 0xf2, 0x39, 0xee, 0x02, 0xdf, 0x35, 0xfa, 0xca, 0xd9, 0x76,
    0xfe, 0xf1, 0x49, 0xfb, 0x2d, 0x1f, 0xdc, 0x24, 0x7b, 0x2b, 0x96, 0xd5, 0xd4, 0x0b, 0xe6, 0x36,
    0xbd, 0x91, 0x98, 0x1b, 0xa7, 0x52, 0x5d, 0x8e, 0x4e, 0x47, 0x44, 0x11, 0x04, 0x4f, 0xfa, 0x58,
    0xc4, 0xfc, 0x70, 0xe3, 0x5f, 0x60, 0xbd, 0x5a, 0xa4, 0x3f, 0xcf, 0x4f, 0x96, 0xa6, 0x59, 0x5f,
    0xc2, 0xd5, 0xa3, 0xeb, 0x58, 0x35, 0x62, 0x5a, 0xa3, 0x4b, 0x21, 0x64, 0xd8, 0x5b, 0xc5, 0x2a,
    0xa4, 0x03, 0xb3, 0x05, 0xf5, 0x9b, 0x19, 0x7d, 0xd5, 0xf8, 0xb4, 0x46, 0x29, 0x3a, 0x6f, 0x02,
    0x64, 0x4a, 0xd1, 0x2a, 0x88, 0xac, 0x8d, 0x5c, 0x79, 0x8d, 0xbc, 0xfb, 0xef, 0x23, 0x17, 0x32,
    0xa1, 0x67, 0x1c, 0xae, 0x19, 0x8d, 0xa1, 0x74, 0x9b, 0x97, 0x4d, 0xe9, 0x45, 0x1d, 0x45, 0x5d,
    0xcb, 0x9c, 0x5d, 0xb2, 0xe2, 0x29, 0x72, 0xbc, 0x0f, 0x6c, 0x32, 0xe0, 0x4a, 0xdc, 0x75, 0x48,
    0x51, 0x15, 0x60, 0x32, 0x6c, 0xa7, 0xd5, 0x7f, 0x03, 0x9f, 0x6c, 0xbe, 0x77, 0xd0, 0x4b, 0xdd,
    0xce, 0xd3, 0xab, 0x37, 0x8e, 0x58, 0x02, 0xbe, 0x07, 0xd2, 0xc3, 0x01, 0x89, 0xbd, 0x69, 0xcf,
    0x14, 0x68, 0x3b, 0x37, 0x8e, 0x80, 0x11, 0x12, 0x47, 0x41, 0x55, 0x44, 0x87, 0x9c, 0xd1, 0xb2,
    0x52, 0x20, 0xd8, 0x67, 0xf1, 0xf8, 0x07, 0xcc, 0x5d, 0x19, 0xb7, 0x77, 0xda, 0xf1, 0x92, 0x9c,
    0x93, 0x5a, 0x2a, 0xb4, 0xf0, 0x2f, 0x99, 0xff, 0x8b, 0xdb, 0xde, 0x36, 0x5d, 0x8c, 0x4c, 0x03,
    0x78, 0xde, 0x64, 0x54, 0x05, 0x4e, 0x4a, 0xf4, 0x7a, 0x3f, 0x40, 0xe8, 0x4e, 0x8d, 0x3d, 0xb7,
    0x18, 0x90, 0x3a, 0xd9, 0x3b, 0x08, 0xc9, 0x4c, 0x1d, 0x4b, 0x39, 0xb8, 0x0d, 0xea, 0x8c, 0x3b,
    0x44, 0xbd, 0x15, 0x17, 0x5b, 0xc1, 0x79, 0x8c, 0xc8, 0x62, 0xdb, 0x2e, 0x74, 0x69, 0xa4, 0x9c,
    0x6d, 0x13, 0x2a, 0x94, 0xf2, 0x78, 0xff, 0x6e, 0xd7, 0x3d, 0xc8, 0x9e, 0xb6, 0xa6, 0x04, 0x24,
    0x3d, 0x10, 0x0d, 0xc6, 0xcc, 0xa8, 0xde, 0x77, 0x35, 0x43, 0x8b, 0x95, 0x7d, 0xbf, 0xfa, 0xbb,
    0xdf, 0x88, 0xed, 0x80, 0x22, 0x83, 0x19, 0x94, 0xab, 0xe6, 0xad, 0x01, 0xc5, 0x14, 0x38, 0xf0,
    0xc3, 0xc1, 0x2f, 0xae, 0x14, 0x6f, 0x86, 0xce, 0xe9, 0x31, 0x11, 0x3c, 0xba, 0x5a, 0xeb, 0xd5,
    0xb3, 0x73, 0x8c, 0xec, 0x2a, 0x02, 0xfd, 0xfd, 0x86, 0x3e, 0x50, 0xa8, 0xb2, 0x70, 0x18, 0xdd,
    0xbb, 0xe9, 0x19, 0x52, 0x49, 0xe8, 0xda, 0x42, 0x71, 0x22, 0xb3, 0x8e, 0x81, 0x1c, 0xd2, 0xab,
    0x0e, 0x3d, 0x5a, 0xa7, 0x4c, 0x6a, 0xe5, 0x85, 0xdb, 0xb8, 0x91, 0x54, 0x80, 0xae, 0x41, 0xdf,
    0xa3, 0xe1, 0xe2, 0xb2, 0x4d, 0xc5, 0x00, 0xfd, 0x99, 0x3a, 0x20, 0xe4, 0xf9, 0x9a, 0x37, 0x29,
    0xe6, 0xd8, 0xa1, 0xb9, 0xd0, 0x0f, 0xb6, 0xf5, 0xd6, 0x45, 0x54, 0xea, 0xef, 0x52, 0x31, 0x21,
    0x08, 0xdf, 0xb3, 0x14, 0x59, 0x69, 0xd2, 0xdb, 0xfa, 0x9f, 0xdd, 0x55, 0x71, 0x39, 0x7e, 0xfe,
    0x2f, 0xd0, 0xaf, 0x01, 0xb0, 0xe2, 0x56, 0x80, 0x83, 0xf7, 0xdf, 0x49, 0xa1, 0xd9, 0x87, 0xe5,
    0xe0, 0x89, 0x23, 0xce, 0x7d, 0x51, 0xb2, 0x8f, 0x67, 0x4f, 0xd0, 0x49, 0xd5, 0x82, 0x57, 0x71,
    0x18, 0x47, 0x10, 0xde, 0xa6, 0x67, 0x36, 0xdb, 0x45, 0x55, 0xee, 0x0f, 0x24, 0xa4, 0x51, 0xb7,
    0x46, 0x92, 0x4b, 0x41, 0x64, 0x00, 0x88, 0xf9, 0xda, 0xcc, 0xbc, 0x81, 0x2d, 0xfd, 0x2f, 0x0c,
    0xbd, 0x79, 0x38, 0xa9, 0x9a, 0xc3, 0x43, 0x31, 0xf3, 0x19, 0x36, 0x88, 0x5e, 0xea, 0x33, 0xf9,
    0x8d, 0x06, 0x6f, 0xf8, 0xe9, 0x8f, 0x6d, 0x9d, 0x30, 0x1a, 0x93, 0xd4, 0xde, 0xa7, 0x5a, 0xf7,
    0x9c, 0xc4, 0x04, 0x06, 0xfe, 0xa3, 0xbc, 0x16, 0xff, 0x01, 0x2b, 0xc5, 0xed, 0x76, 0xa2, 0x6e,
    0x41, 0x55, 0x83, 0xeb, 0x2c, 0x34, 0xc9, 0xc5, 0x51, 0x25, 0x2b, 0xea, 0x4d, 0x4b, 0x83, 0xd0,
    0xef, 0xed, 0x76, 0x85, 0xec, 0x5d, 0x20, 0xa4, 0x8c, 0x2b, 0x68, 0xa0, 0x39, 0x87, 0x22, 0x8e,
    0x0c, 0x6a, 0xd4, 0x75, 0x44, 0xfa, 0x27, 0xb4, 0xd3, 0x8d, 0x4a, 0xa6, 0xbc, 0xb5, 0x02, 0xc5,
    0xb5, 0x7c, 0x52, 0xe5, 0xbd, 0xde, 0x90, 0xa9, 0xf2, 0x13, 0x9b, 0xb2, 0x14, 0xad, 0x2c, 0x21,
    0x46, 0x76, 0x4d, 0x80, 0xc0, 0xd8, 0x39, 0xf9, 0x55, 0xb5, 0x87, 0xc9, 0x22, 0xa7, 0x28, 0xfd,
    0x22, 0xa2, 0xa9, 0xa9, 0x01, 0x6c, 0x69, 0x5c, 0xa5, 0xb0, 0x1b, 0x9e, 0xd4, 0xcc, 0x28, 0x5b,
    0x9e, 0xca, 0x99, 0x3e, 0xd1, 0x1c, 0xa6, 0x3f, 0x56, 0xcd, 0x0c, 0x89, 0xde, 0x19, 0x2a, 0xe1,
    0x6d, 0x20, 0x99, 0xa3, 0xc6, 0x84, 0x03, 0x33, 0xf7, 0x09, 0xf6, 0xce, 0x9a, 0xe1, 0x9b, 0x7b,
    0x9e, 0x2b, 0xc7, 0xbd, 0xc8, 0x03, 0x5b, 0xd8, 0xed, 0x98, 0xbf, 0x5a, 0xdf, 0xea, 0xad, 0x42,
    0xa4, 0x11, 0xe7, 0x23, 0xdd, 0x0d, 0x66, 0xab, 0xb8, 0x92, 0x57, 0x82, 0xce, 0xbd, 0x44, 0xd8,
    0x3a, 0x40, 0xc4, 0xc1, 0x99, 0xf8, 0xd0, 0x08, 0x3a, 0x4c, 0xb7, 0x5f, 0x04, 0xe7, 0x0b, 0x8e,
    0x09, 0xf0, 0x00, 0x06, 0x9e, 0xf4, 0xc4, 0x32, 0xa8, 0x9f, 0x21, 0xdf, 0xfd, 0xa9, 0x2d, 0x43,
    0x01, 0x91, 0x99, 0xf2, 0x01, 0xf4, 0xe5, 0xd6, 0xb1, 0xf2, 0x3d, 0x19, 0x7d, 0x61, 0xa3, 0xb4,
    0x34, 0x89, 0x4e, 0x9b, 0x2a, 0x9d, 0x8c, 0x77, 0xca, 0x3c, 0x99, 0xba, 0x60, 0xb8, 0x48, 0xc7,
    0x9e, 0xb3, 0xfd, 0xc5, 0xe3, 0x9f, 0x20, 0x3a, 0x1d, 0xe9, 0x81, 0xc4, 0x94, 0xdf, 0x02, 0xe7,
    0x98, 0x40, 0xa3, 0xe6, 0x9c, 0x24, 0x1e, 0xa3, 0xb6, 0x70, 0x18, 0x92, 0x38, 0x99, 0x71, 0x15,
    0x01, 0xdf, 0x5d, 0x1d, 0xa0, 0x13, 0x53, 0xdc, 0x0b, 0xc3, 0x67, 0x7c, 0x58, 0x35, 0xf1, 0x39,
    0xbe, 0x12, 0xef, 0x2b, 0xd0, 0xa3, 0xe5, 0xe4, 0x13, 0xc4, 0xc6, 0xc4, 0xc4, 0x35, 0x53, 0x44,
    0xce, 0xf0, 0x56, 0x1e, 0x62, 0x0c, 0xff, 0x59, 0xe7, 0xf2, 0x4a, 0xbe, 0x5e, 0xf2, 0xa3, 0xba,
    0x9f, 0x01, 0xcf, 0x1b, 0xad, 0xf2, 0x12, 0xe0, 0xbc, 0x93, 0x8c, 0x2c, 0xea, 0xba, 0x0c, 0x12,
    0xa8, 0x46, 0xbb, 0x94, 0x75, 0x95, 0xb1, 0x79, 0xa3, 0x52, 0x84, 0x7d, 0x1b, 0xd3, 0x4a, 0x37,
    0x29, 0xab, 0x54, 0xe1, 0xe3, 0xd9, 0xa5, 0x43, 0x7c, 0x27, 0x89, 0xb3, 0x8e, 0x20, 0x4b, 0x02,
    0x8a, 0xa4, 0x8e, 0x53, 0x0c, 0x19, 0x4c, 0x96, 0xb5, 0xb4, 0x36, 0xda, 0xa3, 0x0e, 0x94, 0x49,
    0x44, 0xf8, 0x7a, 0x5e, 0xdf, 0x98, 0x8b, 0xfe, 0xd9, 0xea, 0xdf, 0xe2, 0xd7, 0xb4, 0xd1, 0x98,
    0xba, 0x40, 0x34, 0x62, 0xe0, 0x29, 0x7f, 0x16, 0x7d, 0x6a, 0xb7, 0xe4, 0x87, 0x89, 0x40, 0x4a,
    0xc1, 0x4f, 0x1c, 0xa7, 0x36, 0x76, 0x3a, 0x3f, 0xfe, 0xf6, 0x40, 0x04, 0x0e, 0x88, 0x59, 0x71,
    0x6c, 0x05, 0x24, 0xe8, 0xfb, 0x51, 0xda, 0x52, 0x69, 0x81, 0xcf, 0xc6, 0x99, 0x02, 0x6f, 0x99,
    0x40, 0x71, 0x6e, 0x40, 0x93, 0xcc, 0x42, 0x04, 0x0d, 0x43, 0x48, 0x1f, 0xa4, 0xb5, 0x6d, 0x6c,
    0x41, 0x94, 0x08, 0xf1, 0x3d, 0x29, 0xde, 0xf0, 0x61, 0xdd, 0xee, 0xff, 0x89, 0x49, 0xd8, 0xa3,
    0xc1, 0xf7, 0x25, 0x6f, 0xd2, 0x6f, 0xe7, 0x5e, 0xa1, 0xed, 0xcf, 0x00, 0x57, 0x2f, 0x53, 0x6c,
    0xf8, 0x6e, 0x8c, 0xc4, 0x5d, 0xe5, 0x63, 0x19, 0xd0, 0x1c, 0xe8, 0xf1, 0x49, 0x59, 0xe9, 0x9b,
    0xa9, 0xc2, 0xa8, 0x54, 0x10, 0xa5, 0xba, 0xb9, 0x02, 0xba, 0xbd, 0xe1, 0x96, 0xf2, 0x43, 0xf8,
    0x89, 0xf1, 0x0f, 0x1d, 0xea, 0x2f, 0xa3, 0x38, 0x4d, 0x31, 0xad, 0x94, 0x14, 0x1d, 0x7f, 0x41,
    0x7d, 0x24, 0x3a, 0xa7, 0x79, 0xe1, 0xf1, 0x5d, 0xfb, 0x83, 0x63, 0x69, 0xf3, 0xa4, 0x30, 0x6f,
    0xe8, 0x26, 0x65, 0x15, 0x45, 0x79, 0xec, 0xaa, 0x57, 0x8b, 0x6d, 0xbf, 0xb3, 0xbe, 0x0b, 0x23,
    0xc0, 0xe9, 0x76, 0x2d, 0xcd, 0x0a, 0x28, 0x18, 0x13, 0x47, 0x18, 0x7f, 0x39, 0x3e, 0x9c, 0x9f,
    0x7e, 0x5c, 0xa6, 0xf7, 0xd0, 0xff, 0x73, 0xa3, 0xcc, 0xc3, 0xf0, 0x82, 0x04, 0x73, 0xf0, 0x8c,
    0xca, 0xf8, 0x82, 0x9c, 0x29, 0x2c, 0xf2, 0x8a, 0x07, 0x03, 0xf6, 0x31, 0xcf, 0xdd, 0xf5, 0x0f,
    0x73, 0x96, 0x84, 0xff, 0xb7, 0x83, 0x7c, 0x0e, 0xe5, 0x82, 0x36, 0x57, 0x86, 0xb5, 0x13, 0xa6,
    0x1d, 0xa1, 0x88, 0x51, 0x8a, 0xe6, 0x8e, 0xde, 0xd2, 0xb8, 0x6d, 0x43, 0x04, 0xc9, 0x38, 0xae,
    0x62, 0x7a, 0x67, 0xd8, 0x0e, 0x29, 0xc3, 0x78, 0x18, 0x0a, 0x19, 0xd6, 0xb5, 0x56, 0xa8, 0x60,
    0x9a, 0x9d, 0x83, 0x57, 0xa3, 0x72, 0x5d, 0x5a, 0x7d, 0x25, 0xbd, 0xb6, 0x82, 0x3b, 0xc7, 0x1e,
    0xd6, 0xb5, 0xb3, 0xe8, 0x7b, 0xc8, 0xef, 0x80, 0x82, 0x6a, 0xd2, 0x86, 0x6d, 0x7f, 0xd0, 0xeb,
    0x5e, 0xa8, 0x18, 0xb9, 0x77, 0xea, 0x47, 0xc3, 0xb4, 0xad, 0x09, 0xca, 0x53, 0x87, 0xeb, 0x24,
    0x70, 0xd2, 0xce, 0x19, 0x15, 0x63, 0xd1, 0xdd, 0xab, 0x3c, 0xb3, 0x86, 0x91, 0x4d, 0x5c, 0x88,
    0xce, 0xa6, 0xc9, 0x12, 0x61, 0x60, 0x2c, 0x3c, 0x69, 0xaf, 0xb9, 0x01, 0xc7, 0x80, 0x62, 0x89,
    0x9e, 0x25, 0x2a, 0x22, 0x58, 0x72, 0x16, 0xb8, 0xb0, 0x18, 0xdb, 0x60, 0x20, 0x4b, 0x38, 0x51,
    0xd8, 0xfa, 0x62, 0x7f, 0xa4, 0xac, 0x39, 0x41, 0x7c, 0xa9, 0xe6, 0x90, 0x80, 0x4b, 0x2f, 0xcb,
    0xe5, 0x79, 0x52, 0xc2, 0x12, 0x4e, 0x7e, 0xb4, 0x53, 0x5a, 0x87, 0x0b
};
const TestVector tests[] = {
    { _testData0, 1, 0x5767df55},
    { _testData1, 10, 0xab08b05c},
    { _testData2, 100, 0x9f1a3718},
    { _testData3, 500, 0xd102a259},
    { _testData4, 1500, 0x929588ea},
    { nullptr, 0, 0 }
};
// end generated_test code

static const size_t chunkSizes[] = { 1, 10, 256 };
static const size_t numChunkSizes = sizeof(chunkSizes) / sizeof(chunkSizes[0]);


void setup() {
    waitFor(Serial.isConnected, 10000);
    Log.info("starting test suite");

}

void loop() {
    int successCount = 0;
    int failureCount = 0;

    for(size_t testNum = 0; tests[testNum].data; testNum++) {
        uint32_t calcCrc = CRC32_RK::calculate(tests[testNum].data, tests[testNum].size);
        if (calcCrc != tests[testNum].crc) {
            Log.info("test %d failed calcCrc=%08x expected=%08x", (int)testNum, (int)calcCrc, (int)tests[testNum].crc);
            failureCount++;
        }
        else {
            successCount++;
        }
        for(size_t chunkSizeIndex = 0; chunkSizeIndex < numChunkSizes; chunkSizeIndex++) {
            size_t chunkSize = chunkSizes[chunkSizeIndex];

            CRC32_RK::State state;
            for(size_t offset = 0; offset < tests[testNum].size; ) {
                size_t len = tests[testNum].size - offset;
                if (len > chunkSize) {
                    len = chunkSize;
                }
                calcCrc = state.calculate(&tests[testNum].data[offset], len);
                offset += len;
            }
            if (calcCrc != tests[testNum].crc) {
                Log.info("test %d chunkSize=%d failed calcCrc=%08x expected=%08x chunkSize=%d", 
                    (int)testNum, (int)chunkSize, (int)calcCrc, (int)tests[testNum].crc, (int)chunkSize);
                failureCount++;
            }
            else {
                successCount++;
            }        
        }

    }

    if (failureCount == 0) {
        Log.info("all tests completed successfully %d", successCount);
    }
    else {
        Log.info("%d tests failed out of %d", failureCount, (successCount + failureCount));
    }
    Log.info("freeMemory=%d", (int)System.freeMemory());

    delay(10000);
}

